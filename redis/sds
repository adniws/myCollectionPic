sds.c 和 sds.h 实现了redis中的动态字符串。
动态字符串的数据结构为sdshdr结构体
sdshdr由三个成员组成：free、len、buff
buff中存放字符串（尾字符为‘\0’）
free代表分配了未使用的内存空间
len代表buff中字符串的长度，但不计算尾字符‘\0’
由于sdshdr中保存了字符串长度len，所以其查询字符串长度的时间复杂度为O(1),C风格字符串使用strlen（）查询字符串长度时间复杂度为O(n)
free和len字段使得在频繁修改字符串的场景下有较好的性能，原因是减少了修改字符串时带来的内存重分配次数
由于free的存在，可以保留一定的缓冲内存，使得很多情况下增大数组可以无需调用系统分配内存。
free的两种策略:
1:空间预分配：
  对sds进行修改之后，若len小于1mb，free=len
  对sds进行修改之后，若len大于等于1mb，free=1mb
2：惰性空间释放：
  字符串缩短操作之后，多出来的内存并不是马上释放，而是保留，也就是free值增大
 len的存在使得字符串不需要以‘\0’判断字符串的结尾，那么字符串中就可以保存\0本身，也就是说可以保存任意格式的二进制数据，如视频，音频、图片等。
 
