dic也就是字典，使用hash作为底层实现。
dict定义为一个结构体
  其成员有：
    dicType *type ：一个指向dictType结构的指针，保存了对不同数据类型的函数（api）
    void *privdate：保存了上面那些函数中所需要的参数
    dictht ht[2]: 保存了2个哈希表的数组，ht[0]用于保存数据，ht[1]一般为空，在rehash时使用
    in trehashidx： rehash索引，如果不在进行rehash，其值为-1
    
    字典所保存的数据在ht[0]中
    
    dictht也定义为一个结构体
      其成员有：
        dictEntry **table； 哈希表数组，
        unsigned long size； 哈希表的大小，也就是table的长度
        unsigned long sizemask； 哈希表掩码，用于计算索引值 总是等于size-1
        unsigned long used; 已有的节点数量
        
        
        table数组中每一个元素都是dictEntry结构
        其成员有：
            void *key  k-v中的k
            union{
            void* val；
            uint64_tu64;
            int64_ts64;
            } v             k-v中的v ，定义成联合体，可以是多种类型，且节省内存
            dictEntry *next； 指向下一个哈希表节点，也就是说采用链式方法应对hash冲突。
            
        
一个新的键值对添加到字典里面时，先根据键值对的键计算出hash和索引
  hash = dict-》type-》hashFunction(key)；
  index = hash & dict-》ht[x].sizemask;
  根据计算的index值，将新的键值对加入到table数组中的节点。（链表）
  
  
